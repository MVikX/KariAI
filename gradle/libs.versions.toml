[versions]
# Core
kotlin = "1.9.22"
coroutines = "1.8.1"
serialization = "1.6.3"
kotlinxSerialization = "1.6.2"
kotlinx-datetime = "0.5.0"

# Android SDK
agp = "8.5.2"
androidCompileSdk = "35"
androidMinSdk = "24"
androidTargetSdk = "35"

# AndroidX
coreKtx = "1.15.0"
appcompat = "1.7.0"
constraintLayout = "2.2.1"
lifecycle = "2.8.4"
activityCompose = "1.10.1"
navigationSafeArgsGenerator = "2.8.9"

# Compose
compose = "1.8.0"
foundation = "1.7.8"
uiAndroid = "1.7.8"
runtimeAndroid = "1.7.8"
foundationLayoutAndroid = "1.7.8"
material3 = "1.3.1"

# Ktor
ktor = "2.3.7"

# DI, settings
koin = "3.2.0"
koinCompose = "3.4.6"
settings = "1.1.1"

# Test
junit = "4.13.2"
testJunit = "1.2.1"
espressoCore = "3.6.1"

# Moko / YAML
moko-resources = "0.23.0"
yamlkt = "0.12.0"

runtimeAndroidVersion = "1.7.8"
foundationAndroid = "1.7.8"

androidx_browser = "1.4.0"

playServicesFitness = "21.1.0"

khealth = "1.1.0"

[libraries]

# Kotlin
kotlinTest = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotlinTestJunit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin" }

# Serialization
serializationJson = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "serialization" }
serializationCore = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "kotlinxSerialization" }

# Coroutines
coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinx-datetime" }

# AndroidX Core
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "appcompat" }
material = { group = "com.google.android.material", name = "material", version.ref = "appcompat" }
constraintLayout = { group = "androidx.constraintlayout", name = "constraintlayout", version.ref = "constraintLayout" }

# Lifecycle + Activity
activityCompose = { module = "androidx.activity:activity-compose", version.ref = "activityCompose" }
lifecycleViewModel = { group = "androidx.lifecycle", name = "lifecycle-viewmodel-ktx", version.ref = "lifecycle" }
lifecycleViewModelCompose = { group = "androidx.lifecycle", name = "lifecycle-viewmodel-compose", version.ref = "lifecycle" }

# AndroidX Compose
runtime = { group = "androidx.compose.runtime", name = "runtime", version.ref = "runtimeAndroid" }
foundationLayout = { group = "androidx.compose.foundation", name = "foundation-layout", version.ref = "foundationLayoutAndroid" }
ui = { group = "androidx.compose.ui", name = "ui", version.ref = "uiAndroid" }
uiTooling = { group = "androidx.compose.ui", name = "ui-tooling", version.ref = "uiAndroid" }
foundationAndroid = { group = "androidx.compose.foundation", name = "foundation-android", version.ref = "foundationAndroid" }
runtime-android = { group = "androidx.compose.runtime", name = "runtime-android", version.ref = "runtimeAndroidVersion" }

# JetBrains Compose Multiplatform
composeRuntime = { module = "org.jetbrains.compose.runtime:runtime", version.ref = "compose" }
composeUi = { module = "org.jetbrains.compose.ui:ui", version.ref = "compose" }
composeFoundation = { module = "org.jetbrains.compose.foundation:foundation", version.ref = "compose" }
composeMaterial = { module = "org.jetbrains.compose.material:material", version.ref = "compose" }
composeMaterial3 = { module = "org.jetbrains.compose.material3:material3", version.ref = "compose" }
composePreview = { module = "org.jetbrains.compose.ui:ui-tooling-preview", version.ref = "compose" }
composeResources = { module = "org.jetbrains.compose.resources:resources", version.ref = "compose" }
composeComponentsResources = { module = "org.jetbrains.compose.components:resources", version.ref = "compose" }

# Ktor
ktorClientCore = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktorClientLogging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktorClientOkhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktorClientDarwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktorContentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktorSerializationJson = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }


androidx-browser = { module = "androidx.browser:browser", version.ref = "androidx_browser" }

khealth = { module = "io.github.shubhamsinghshubham777:khealth", version.ref = "khealth" }

# Koin DI
koinCore = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koinCompose = { module = "io.insert-koin:koin-androidx-compose", version.ref = "koinCompose" }

# Settings
multiplatformSettings = { module = "com.russhwolf:multiplatform-settings", version.ref = "settings" }
multiplatformSettingsNoarg = { module = "com.russhwolf:multiplatform-settings-no-arg", version.ref = "settings" }
multiplatformSettingsAndroid = { module = "com.russhwolf:multiplatform-settings-android", version.ref = "settings" }

# Navigation (Safe Args)
navigationSafeArgsGenerator = { group = "androidx.navigation", name = "navigation-safe-args-generator", version.ref = "navigationSafeArgsGenerator" }

# Test
junit = { group = "junit", name = "junit", version.ref = "junit" }
testJunit = { group = "androidx.test.ext", name = "junit", version.ref = "testJunit" }
espressoCore = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }

# Misc
yamlkt = { module = "net.mamoe.yamlkt:yamlkt", version.ref = "yamlkt" }
mokoResources = { module = "dev.icerock.moko:resources", version.ref = "moko-resources" }

play-services-fitness = { group = "com.google.android.gms", name = "play-services-fitness", version.ref = "playServicesFitness" }

[plugins]
androidApplication = { id = "com.android.application", version.ref = "agp" }
androidLibrary = { id = "com.android.library", version.ref = "agp" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
composeMultiplatform = { id = "org.jetbrains.compose", version.ref = "compose" }
mokoResources = { id = "dev.icerock.mobile.multiplatform-resources", version.ref = "moko-resources" }
kotlinSerialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }